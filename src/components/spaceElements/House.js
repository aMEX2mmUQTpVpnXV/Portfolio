/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: aitordsgn (https://sketchfab.com/aitordsgn)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/flying-up-house-3f6a162058c14d10aa2a98627d85a07d
title: Flying Up House
*/

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "react-three-fiber";

export function House(props) {
  const { nodes, materials } = useGLTF("house.gltf");
  const myMesh = React.useRef();
  const openInNewTab = (url) => {
    const newWindow = window.open(url, "_blank", "noopener,noreferrer");
    if (newWindow) newWindow.opener = null;
  };

  function randNum() {
    const min = -0.01;
    const max = 0.01;
    const rand = min + Math.random() * (max - min);
    return rand;
  }
  function randSpeed() {
    const min = 0.03;
    const max = 0.04;
    const rand = min + Math.random() * (max - min);
    return rand;
  }

  const xrotation = randNum();
  const yrotation = randNum();
  const zrotation = randNum();
  const speed = randSpeed();

  useFrame(({ clock }) => {
    myMesh.current.rotation.x += xrotation;
    myMesh.current.rotation.y += yrotation;
    myMesh.current.rotation.z -= zrotation;
    myMesh.current.position.x -= speed;
    myMesh.current.position.z -= 0;
    console.log(myMesh.current.position.x);
    if (myMesh.current.position.x < -100) {
      myMesh.current.position.x = props.x;
      myMesh.current.position.y = props.y;
      myMesh.current.position.z = props.z;
    }
  });

  return (
    <group
      {...props}
      dispose={null}
      position={[props.x, props.y, props.z]}
      scale={props.scale}
      rotation={[
        Math.PI * props.rotX,
        Math.PI * props.rotY,
        Math.PI * props.rotZ,
      ]}
    >
      <mesh
        ref={myMesh}
        onClick={() =>
          openInNewTab(
            "https://amex2mmuqtpvpnxv.github.io/Portfolio/#/iterative"
          )
        }
      >
        <group rotation={[-Math.PI / 2, 0, 0]} scale={1.43}>
          <group rotation={[Math.PI / 2, 0, 0]}>
            <group
              position={[1.44, 2.08, -0.43]}
              rotation={[Math.PI / 2, 0, -0.86]}
              scale={0.03}
            >
              <mesh
                geometry={nodes.Object_4.geometry}
                material={materials.Stylized}
              />
              <mesh
                geometry={nodes.Object_5.geometry}
                material={materials.Stylized}
              />
              <mesh
                geometry={nodes.Object_6.geometry}
                material={materials.Stylized}
              />
              <mesh
                geometry={nodes.Object_7.geometry}
                material={materials.Stylized}
              />
            </group>
            <group
              position={[0.98, 6.34, 1.64]}
              rotation={[-2.81, -0.38, -2.58]}
              scale={0.13}
            >
              <mesh
                geometry={nodes.Object_9.geometry}
                material={materials.Globos_Stylized}
              />
              <mesh
                geometry={nodes.Object_10.geometry}
                material={materials.Globos_Stylized}
              />
              <mesh
                geometry={nodes.Object_11.geometry}
                material={materials.Globos_Stylized}
              />
              <mesh
                geometry={nodes.Object_12.geometry}
                material={materials.Globos_Stylized}
              />
              <mesh
                geometry={nodes.Object_13.geometry}
                material={materials.Globos_Stylized}
              />
            </group>
          </group>
        </group>
      </mesh>
    </group>
  );
}

useGLTF.preload("house.gltf");
